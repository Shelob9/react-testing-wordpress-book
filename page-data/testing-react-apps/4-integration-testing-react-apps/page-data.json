{"componentChunkName":"component---src-templates-docs-js","path":"/testing-react-apps/4-integration-testing-react-apps","webpackCompilationHash":"f08cc9c41280b7082899","result":{"data":{"site":{"siteMetadata":{"title":"JavaScript Testing In And Around WordPress | Josh Pollock","docsLocation":"https://github.com/shelob9/react-testing-wordpress-book/tree/master/content"}},"mdx":{"fields":{"id":"0ae373e9-8080-5a70-868b-9f29aefc4a75","title":"Integration Testing React Apps","slug":"/testing-react-apps/4-integration-testing-react-apps"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Integration Testing React Apps\",\n  \"metaTitle\": \"Integration Testing React\",\n  \"metaDescription\": \"Integration testing React apps with Jest, React Test Renderer and React Testing Library\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Do the two components work together as expected?\")), mdx(\"p\", null, \"In the previous section, we wrote tests to covered using unit tests to prove our two components work as expected in isolation. That's totally contrived. Now we want to use integration tests to check if that behaviour is right or not.\"), mdx(\"h2\", null, \"Integration Testing With React Testing Library\"), mdx(\"p\", null, \"When we created the app with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"create-react-app\"), \" we got an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<App />\"), \" component. That component should be able to do everything defined in our spec.\"), mdx(\"p\", null, \"Beacuse that component will be composed of the other two components, we can run tests on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<App />\"), \" to ensure that the two componets are properly integrated. This is the most realistic way to test, and we do not need to make a mock or anything.\"), mdx(\"p\", null, \"To show an alternative to using, the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://testing-library.com/docs/dom-testing-library/api-queries#getby\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"getBy*\"), \" approach\"), \" I showed in the unit testing section. Instead, I'll show how to query by CSS selector's using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://testing-library.com/docs/angular-testing-library/api#container\"\n  }), \"container.querySelector()\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"it(\\\"Displays the updated value when value changes\\\", () => {\\n  //Get the application container\\n  const { container } = render(<App />);\\n  //Query for display value by class\\n  expect(container.querySelector(\\\".display-value\\\").textContent).toBe(\\\"Hi Roy\\\");\\n  //fire event on the input, querying by input ID\\n  fireEvent.change(container.querySelector(\\\"#the-input\\\"), {\\n    target: { value: \\\"New Value\\\" }\\n  });\\n  //Ensure that the display input displays the updated value.\\n  expect(container.querySelector(\\\".display-value\\\").textContent).toBe(\\n    \\\"New Value\\\"\\n  );\\n});\\n\")), mdx(\"p\", null, \"That's the only integration test we need. None of these tests should work yet. In addition we have learned some things about the HTML structure of the components we need to create. Commit all of this in your app. Now you can start writing the components.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#integration-testing-with-react-testing-library","title":"Integration Testing With React Testing Library"}]},"parent":{"__typename":"File","relativePath":"testing-react-apps/4-integration-testing-react-apps.md"},"frontmatter":{"metaTitle":"Integration Testing React","metaDescription":"Integration testing React apps with Jest, React Test Renderer and React Testing Library"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/about","title":"About"}}},{"node":{"fields":{"slug":"/","title":"JavaScript Testing In And Around WordPress"}}},{"node":{"fields":{"slug":"/testing-background","title":"Types of Tests"}}},{"node":{"fields":{"slug":"/next","title":"Next Steps"}}},{"node":{"fields":{"slug":"/introduction","title":"Introduction"}}},{"node":{"fields":{"slug":"/testing-background/2-unit-tests","title":"Unit Tests"}}},{"node":{"fields":{"slug":"/testing-react-wordpress-blocks","title":"Testing WordPress Blocks"}}},{"node":{"fields":{"slug":"/testing-react-apps","title":"Testing React Apps"}}},{"node":{"fields":{"slug":"/testing-background/3-integration-tests","title":"Integration Tests"}}},{"node":{"fields":{"slug":"/testing-background/4-acceptance-tests","title":"Acceptance Tests"}}},{"node":{"fields":{"slug":"/testing-react-wordpress-blocks/5-writing-tdd-blocks","title":"Test-Driven Gutenberg Blocks"}}},{"node":{"fields":{"slug":"/testing-react-wordpress-blocks/2-setting-up","title":"Creating A WordPress Plugin Using WordPress Scripts"}}},{"node":{"fields":{"slug":"/testing-react-wordpress-blocks/3-structure","title":"Structuring  WordRress Plugin For Testablity"}}},{"node":{"fields":{"slug":"/testing-react-wordpress-blocks/4-writing-block-tests","title":"Wrting Tests For WordPress Blocks"}}},{"node":{"fields":{"slug":"/testing-react-apps/2-questions-and-specs","title":"Questions and Scopes"}}},{"node":{"fields":{"slug":"/testing-react-apps/4-integration-testing-react-apps","title":"Integration Testing React Apps"}}},{"node":{"fields":{"slug":"/testing-react-apps/5-writing-tdd-react-components","title":"Writing Test Driven React Components"}}},{"node":{"fields":{"slug":"/testing-react-apps/3-unit-testing-react","title":"Unit Testing React Apps"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"0ae373e9-8080-5a70-868b-9f29aefc4a75"}}}