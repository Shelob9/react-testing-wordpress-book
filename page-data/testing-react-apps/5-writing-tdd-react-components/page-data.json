{"componentChunkName":"component---src-templates-docs-js","path":"/testing-react-apps/5-writing-tdd-react-components","webpackCompilationHash":"01529aaf5a47c0394c50","result":{"data":{"site":{"siteMetadata":{"title":"JavaScript Testing In And Around WordPress | Josh Pollock","docsLocation":"https://github.com/shelob9/react-wordpress-testing/tree/master/content"}},"mdx":{"fields":{"id":"0283f87f-67e0-5625-9395-8dd72dab144a","title":"Writing Test Driven React Components","slug":"/testing-react-apps/5-writing-tdd-react-components"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Writing Test Driven React Components\",\n  \"metaTitle\": \"Writing Components\",\n  \"metaDescription\": \"Writing React components that already have tests when using the TDD methodology\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In the first section, \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://localhost:8000/testing-react-apps/2-questions-and-specs#test-drivenreactdevelopment\"\n  }), \"we created empty components\"), \" for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<EditValue />\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<DisplayValue />\"), \". Then we wrote tests for them that showed how they should work. Currently these tests prove that the components \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"do not work\"), \". Let's update the components so they do work.\"), mdx(\"h2\", null, \"Continuous Integration For React Apps\"), mdx(\"p\", null, \"A huge benefit of TDD is that we can practice continuous integration and deployment. If each change is fully tested, linted, and code reviewed, we should trust it to automatically deploy once the automated testing has passed. Code review introduces a human step to this process.\"), mdx(\"p\", null, \"CI/ CD lets us follow a red/ green cycle. We commit the failing tests, the CI system runs the tests, they fail. Instead of moving the CI/CD pipeline to the deployment phase it stops. We show these builds as \\\"red.\\\" Then we commit code to make the tests pass, everything shows up \\\"green.\\\" This indicates that a change is safe to make and we can manually or automatically -- depneding on our pipelie -- trigger our automated deployment.\"), mdx(\"p\", null, \"Setting that up is a different subject. Right now our components are red, let's make them green.\"), mdx(\"h3\", null, \"Display Component\"), mdx(\"p\", null, \"Now, if I look back at the tests for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<DisplayValue />\"), \", I see that it has two props value and className. That's pretty simple to impliment:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import React from \\\"react\\\";\\nexport const DisplayValue = ({ value, className }) => (\\n  <div className={className}>{value}</div>\\n);\\n\")), mdx(\"p\", null, \"Adding that should cause the unit tests for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<DisplayValue />\"), \" component to pass. You will need to record a snapshot for the component. Make sure to look at the HTML in the snapshot to ensure it looks like you would expect it to look.\"), mdx(\"h3\", null, \"Edit Component\"), mdx(\"p\", null, \"If you look back over the tests for the EditValue component, we can learn which props we expected it to have. In the final integration test, we selected by the input ID. Therefore we need to make sure that id is passed to both the input and the label's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"for\"), \" attribute. We will also need to supply the outer class attribute as well as the input's onChange callback and value:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import React from \\\"react\\\";\\nexport const EditValue = ({ onChange, value, id, className }) => {\\n  return (\\n    <div className={className}>\\n      <label htmlFor={id}>Set Value</label>\\n      <input\\n        id={id}\\n        value={value}\\n        onChange={event => onChange(event.target.value)}\\n      />\\n    </div>\\n  );\\n};\\n\")), mdx(\"p\", null, \"With this in place, the tests for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<EditValue />\"), \" component should now work.\"), mdx(\"h3\", null, \"The App Component\"), mdx(\"p\", null, \"Now take a look at \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://localhost:8000/testing-react-apps/4-integration-testing-react-apps#integrationtestingwithreacttestinglibrary\"\n  }), \"the test of the app\"), \". It should show us how to wire the componets and what ID to use for the input.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import React, { useState } from \\\"react\\\";\\nimport \\\"./App.css\\\";\\nimport { EditValue } from \\\"./components/EditValue\\\";\\nimport { DisplayValue } from \\\"./components/DisplayValue\\\";\\n\\nfunction App() {\\n  //Manage state of the value.\\n  const [theValue, setTheValue] = useState(\\\"Hi Roy\\\");\\n  return (\\n    <div className=\\\"App\\\">\\n      <DisplayValue value={theValue} className={\\\"display-value\\\"} />\\n      <EditValue\\n        value={theValue}\\n        onChange={setTheValue}\\n        className={\\\"edit-value\\\"}\\n        id={\\\"the-input\\\"}\\n      />\\n    </div>\\n  );\\n}\\n\")), mdx(\"h2\", null, \"TDD vs Worry\"), mdx(\"p\", null, \"Now, all of the tests should pass, if all of the components work as expected and are wired toghether as expected. They may not yet, that's OK. One of the joys of TDD is you do not worry about how to know if your app works or not, it's either red or green. Way less manual testing.\"), mdx(\"p\", null, \"More importantly, you can worry less about regression errros. When you fix a bug, you should not worry about causing existing funcitonality to become bugy. TDD and test automation prevent that.\"), mdx(\"p\", null, \"Now that we have basic components, let's show how to reuse them in a WordPress block, including what to test.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#continuous-integration-for-react-apps","title":"Continuous Integration For React Apps","items":[{"url":"#display-component","title":"Display Component"},{"url":"#edit-component","title":"Edit Component"},{"url":"#the-app-component","title":"The App Component"}]},{"url":"#tdd-vs-worry","title":"TDD vs Worry"}]},"parent":{"__typename":"File","relativePath":"testing-react-apps/5-writing-tdd-react-components.md"},"frontmatter":{"metaTitle":"Writing Components","metaDescription":"Writing React components that already have tests when using the TDD methodology"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/about","title":"About"}}},{"node":{"fields":{"slug":"/next","title":"Next Steps"}}},{"node":{"fields":{"slug":"/introduction","title":"Introduction"}}},{"node":{"fields":{"slug":"/","title":"JavaScript Testing In And Around WordPress"}}},{"node":{"fields":{"slug":"/testing-react-apps","title":"Testing React Apps"}}},{"node":{"fields":{"slug":"/testing-react-apps/5-writing-tdd-react-components","title":"Writing Test Driven React Components"}}},{"node":{"fields":{"slug":"/testing-react-wordpress-blocks","title":"Testing WordPress Blocks"}}},{"node":{"fields":{"slug":"/testing-background","title":"Types of Tests"}}},{"node":{"fields":{"slug":"/testing-react-wordpress-blocks/2-setting-up","title":"Creating A WordPress Plugin Using WordPress Scripts"}}},{"node":{"fields":{"slug":"/testing-react-apps/4-integration-testing-react-apps","title":"Integration Testing React Apps"}}},{"node":{"fields":{"slug":"/testing-react-wordpress-blocks/3-structure","title":"Structuring  WordRress Plugin For Testablity"}}},{"node":{"fields":{"slug":"/testing-background/2-unit-tests","title":"Unit Tests"}}},{"node":{"fields":{"slug":"/testing-react-wordpress-blocks/4-writing-block-tests","title":"Wrting Tests For WordPress Blocks"}}},{"node":{"fields":{"slug":"/testing-react-apps/2-questions-and-specs","title":"Questions and Scopes"}}},{"node":{"fields":{"slug":"/testing-background/3-integration-tests","title":"Integration Tests"}}},{"node":{"fields":{"slug":"/testing-background/4-acceptance-tests","title":"Acceptance Tests"}}},{"node":{"fields":{"slug":"/testing-react-wordpress-blocks/5-writing-tdd-blocks","title":"Test-Driven Gutenberg Blocks"}}},{"node":{"fields":{"slug":"/testing-react-apps/3-unit-testing-react","title":"Unit Testing React Apps"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"0283f87f-67e0-5625-9395-8dd72dab144a"}}}