{"componentChunkName":"component---src-templates-docs-js","path":"/testing-react-wordpress-blocks/3-structure","webpackCompilationHash":"20bbf8f542dd55205dc4","result":{"data":{"site":{"siteMetadata":{"title":"JavaScript Testing In And Around WordPress | Josh Pollock","docsLocation":"https://github.com/shelob9/react-wordpress-testing/tree/master/content"}},"mdx":{"fields":{"id":"2e19eeaa-fca3-5c70-b39c-0431ed932096","title":"Structuring  WordRress Plugin For Testablity","slug":"/testing-react-wordpress-blocks/3-structure"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"metaTitle\": \"Structuring  WordRress Plugin For Testablity\",\n  \"title\": \"Structuring  WordRress Plugin For Testablity\",\n  \"metaDescription\": \"desc\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Starting With Specifications\"), mdx(\"p\", null, \"Just like last time, we'll start by defining the project's scope and what questions different types of tests can answer for us. Then we'll write failing tests, commit those and then make them pass.\"), mdx(\"h3\", null, \"Spec For Block\"), mdx(\"p\", null, \"What we will be building is a a block for showing some text. This could be an alert block, or special call to action block, depending on what you want to do. First, let's create a block with these specs:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The components for the app should be reused.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The block preview and rendered content should be identical.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The control for the value should appear in the block\\u2019s inspector controls.\")), mdx(\"p\", null, \"Once that foundation exists and has good test coverage, you can safely itterate on the code to make the block unique to your needs.\"), mdx(\"h3\", null, \"Tests For Gutenberg Blocks\"), mdx(\"p\", null, \"Beacuse this block will re-use the same components, we do not need to unti test those components. All of the tests we are doing are to ensure that those components work with Gutenberg properly. While small unit tests for functions created to help this process may be useful, for the most part, we want to use integration tests.\"), mdx(\"p\", null, \"In additition, we can use the WordPress e2e test suite, which is included to activate the plugin, add the block and make sure the block is added. That would be our acceptance test, showing that not only do the componentes work toghether, that the final product -- the block functions as expected.\"), mdx(\"h3\", null, \"Jest Is The Test Runner\"), mdx(\"p\", null, \"Testing works the same for Gutenberg blocks as other React apps. We are using Jest as the runner, and we can use same test renderers. Let's go ahead and install the renderers we used last time in our plugin:\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn add @testing-libray/react\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn add react-test-renderer\")), mdx(\"h2\", null, \"Structuring Blocks For Easy Testing\"), mdx(\"p\", null, \"A block can get pretty complex, and it's tempting to do all of that in the file that registers the block. I think that any business logic besides block registration should be seperated into different files. The file that builds the block to do nothing but build the block.\"), mdx(\"h3\", null, \"The Block\"), mdx(\"p\", null, \"The file that builds the block should have the single responsiblity of mapping WordPress editor APIs, such as state management, to the existing components. This needs to happen in the edit \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"and\"), \" save callback. That's two more responsibiliteis, so two more files --one for edit and save callback.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"//Import Blocks API\\nimport { registerBlockType } from \\\"@wordpress/blocks\\\";\\n\\n//Import our components for edit and save callback\\nimport { Editor } from \\\"./components/Editor\\\";\\nimport { Save } from \\\"./components/Save\\\";\\n\\n//Get the block's meta info from block.json so we can also use that on the server.\\nconst blockConfig = require(\\\"../block.json\\\");\\nconst { name, title, attributes, category, keywords } = blockConfig;\\n\\n//Register block\\nregisterBlockType(name, {\\n  title,\\n  attributes,\\n  category,\\n  keywords,\\n  //pass edit callback props to Editor component\\n  edit: props => <Editor {...props} />,\\n  //pass save callback props to Save component\\n  save: props => <Save {...props} />\\n});\\n\")), mdx(\"h3\", null, \"Edit And Save Callbacks\"), mdx(\"p\", null, \"The edit and save callback are composed in separate files, importing components built for the app. They map WordPress' state to the existing components. In addition, they layout the component using the block editor's components.\"), mdx(\"p\", null, \"Let's add an empty edit callback function we can write tests around. At this point, we must consider which of the props we get from WordPress, does the child component actually need. We specifiy those as arguments and leave the rest blank at this point.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"//src/components/Editor.js\\nimport React, { Fragment } from \\\"react\\\";\\n\\nexport const Editor = ({ attributes, setAttributes, className, clientId }) => {\\n  return <Fragment />;\\n};\\n\")), mdx(\"p\", null, \"The save callback just needs the saved attribute and class name:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import React from \\\"react\\\";\\nexport const Save = ({ attributes, className }) => {\\n  return <React.Fragment />;\\n};\\n\")), mdx(\"p\", null, \"Go ahead and commit those components and then we can start writing tests for them.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#starting-with-specifications","title":"Starting With Specifications","items":[{"url":"#spec-for-block","title":"Spec For Block"},{"url":"#tests-for-gutenberg-blocks","title":"Tests For Gutenberg Blocks"},{"url":"#jest-is-the-test-runner","title":"Jest Is The Test Runner"}]},{"url":"#structuring-blocks-for-easy-testing","title":"Structuring Blocks For Easy Testing","items":[{"url":"#the-block","title":"The Block"},{"url":"#edit-and-save-callbacks","title":"Edit And Save Callbacks"}]}]},"parent":{"__typename":"File","relativePath":"testing-react-wordpress-blocks/3-structure.md"},"frontmatter":{"metaTitle":"Structuring  WordRress Plugin For Testablity","metaDescription":"desc"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/about","title":"About"}}},{"node":{"fields":{"slug":"/next","title":"Next Steps"}}},{"node":{"fields":{"slug":"/introduction","title":"Introduction"}}},{"node":{"fields":{"slug":"/","title":"JavaScript Testing In And Around WordPress"}}},{"node":{"fields":{"slug":"/testing-react-apps","title":"Testing React Apps"}}},{"node":{"fields":{"slug":"/testing-react-apps/5-writing-tdd-react-components","title":"Writing Test Driven React Components"}}},{"node":{"fields":{"slug":"/testing-react-wordpress-blocks","title":"Testing WordPress Blocks"}}},{"node":{"fields":{"slug":"/testing-background","title":"Types of Tests"}}},{"node":{"fields":{"slug":"/testing-react-wordpress-blocks/2-setting-up","title":"Creating A WordPress Plugin Using WordPress Scripts"}}},{"node":{"fields":{"slug":"/testing-react-apps/4-integration-testing-react-apps","title":"Integration Testing React Apps"}}},{"node":{"fields":{"slug":"/testing-react-wordpress-blocks/3-structure","title":"Structuring  WordRress Plugin For Testablity"}}},{"node":{"fields":{"slug":"/testing-background/2-unit-tests","title":"Unit Tests"}}},{"node":{"fields":{"slug":"/testing-react-wordpress-blocks/4-writing-block-tests","title":"Wrting Tests For WordPress Blocks"}}},{"node":{"fields":{"slug":"/testing-react-apps/2-questions-and-specs","title":"Questions and Scopes"}}},{"node":{"fields":{"slug":"/testing-background/3-integration-tests","title":"Integration Tests"}}},{"node":{"fields":{"slug":"/testing-background/4-acceptance-tests","title":"Acceptance Tests"}}},{"node":{"fields":{"slug":"/testing-react-wordpress-blocks/5-writing-tdd-blocks","title":"Test-Driven Gutenberg Blocks"}}},{"node":{"fields":{"slug":"/testing-react-apps/3-unit-testing-react","title":"Unit Testing React Apps"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"2e19eeaa-fca3-5c70-b39c-0431ed932096"}}}