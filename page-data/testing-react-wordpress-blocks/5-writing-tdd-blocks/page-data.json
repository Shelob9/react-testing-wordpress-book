{"componentChunkName":"component---src-templates-docs-js","path":"/testing-react-wordpress-blocks/5-writing-tdd-blocks","webpackCompilationHash":"dbe3376deba6db37c54c","result":{"data":{"site":{"siteMetadata":{"title":"JavaScript Testing In And Around WordPress | Josh Pollock","docsLocation":"https://github.com/shelob9/react-wordpress-testing/tree/master/content"}},"mdx":{"fields":{"id":"438f38a1-b020-51a3-b662-8741f27e6917","title":"Test-Driven Gutenberg Blocks","slug":"/testing-react-wordpress-blocks/5-writing-tdd-blocks"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Test-Driven Gutenberg Blocks\",\n  \"metaTitle\": \"Test-Driven Gutenberg Blocks\",\n  \"metaDescription\": \"desc\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In the last part, we created some test for components that do not actually do anything. We are following a \\\"red/ green\\\" pattern. The tests are failing, our CI should be showing a red dot for failure. Now we commit working components until we see green in our CI.\"), mdx(\"h2\", null, \"Save Callback\"), mdx(\"p\", null, \"The test for the save callback called for passing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"attributes\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"className\"), \" props. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<DisplayValue/>\"), \" component accespts props of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"className\"), \". So, this component is really just translating props:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"//src/components/Save\\nimport React from \\\"react\\\";\\nimport { DisplayValue } from \\\"./app/DisplayValue\\\";\\nexport const Save = ({ attributes, className }) => {\\n  return <DisplayValue value={attributes.value} className={className} />;\\n};\\n\")), mdx(\"p\", null, \"Re-run your tests. This should cause the snapshot tests for this component to fail. Take a look at the new JSON, if it looks right, \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://jestjs.io/docs/en/snapshot-testing#updating-snapshots\"\n  }), \"accept the change\"), \".\"), mdx(\"h2\", null, \"Edit Callback\"), mdx(\"p\", null, \"In the tests for the edit callback, we used four props: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"attributes\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setAttributes\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"className\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"clientId\"), \". The last two we can use for the class and id of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<EditValue/>\"), \" component.\"), mdx(\"p\", null, \"The other two props, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"attributes\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setAttributes\"), \", we can not use as-is. We need to pass just \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"attributes.value\"), \" and we need a change handler function for just that attribute.\"), mdx(\"p\", null, \"We can compose the change handler from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setAttributes()\"), \". Keep in mind that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setAttributes()\"), \" works like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.Component.setState()\"), \", not \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.useState()\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"const onChange = value => setAttribute({ value });\\n\")), mdx(\"p\", null, \"If you want to, you can write this outside of the function scope and unit test it. I think that's overkill. Here is the full component:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import React, { Fragment } from \\\"react\\\";\\nimport { EditValue } from \\\"./app/EditValue\\\";\\nimport { DisplayValue } from \\\"./app/DisplayValue\\\";\\nimport { InspectorControls } from \\\"@wordpress/block-editor\\\";\\nexport const Editor = ({ attributes, setAttributes, className, clientId }) => {\\n  //Change handler\\n  const onChange = value => setAttributes({ value });\\n  //current value\\n  const { value } = attributes;\\n  return (\\n    <Fragment>\\n      <InspectorControls>\\n        <EditValue\\n          className={`${className}-editor`}\\n          id={clientId}\\n          value={value}\\n          onChange={onChange}\\n        />\\n      </InspectorControls>\\n      <DisplayValue value={value} className={className} />\\n    </Fragment>\\n  );\\n};\\n\")), mdx(\"p\", null, \"If these tests pass, we know that the componets should work together.\"), mdx(\"h2\", null, \"e2e Testing Gutenberg Blocks\"), mdx(\"p\", null, \"Now that we know that our components work correctly, we need to make sure our plugin can be activated and used to add our block to the post editor. We do this by creating a WordPress site, automating the process of clicking the buttons to do that and asserting that the end result is as expected.\"), mdx(\"p\", null, \"End to end testing for WordPress blocks should get a full section of this course/ gitbook/ whatever later. It's a huge topic, I'll rush through it here.\"), mdx(\"p\", null, \"When we right these test, we assume that all of the components work. These tests are the most like how a user would use the plugin.\"), mdx(\"h3\", null, \"Useing Puppetter To Automate Chrome\"), mdx(\"p\", null, \"This test tool uses headless Chrome, and is controlled using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/GoogleChrome/puppeteer\"\n  }), \"puppetter\"), \".\"), mdx(\"p\", null, \"Easiest if you have WordPress running locally in Docker \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/WordPress/wordpress-develop/tree/master/tools/local-env\"\n  }), \"like core does\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Shelob9/testing-react-wordpress/tree/master#local-development\"\n  }), \"Copy my copy of core's local development\")), mdx(\"h3\", null, \"Helpful Links\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://make.wordpress.org/core/2019/06/27/introducing-the-wordpress-e2e-tests/\"\n  }), \"Introductory Post\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://developer.wordpress.org/block-editor/packages/packages-scripts/\"\n  }), \"Documentation\"))), mdx(\"h3\", null, \"How To Setup Up WordPress End To End Tests\"), mdx(\"p\", null, \"To make things easier, add the WordPress e2e test utilities:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"# Add e2e test utilities\\nyarn add @wordpress/e2e-test-utils\\n\")), mdx(\"p\", null, \"You will see these utility functions shortly. They wrap repeditive steps, such as activating the plugin or adding a block to a post.\"), mdx(\"h3\", null, \"Configure Jest\"), mdx(\"p\", null, \"A seperate Jest config is needed to make sure it does NOT run unit tests.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/Shelob9/testing-react-wordpress/blob/master/jest.config.js\"\n  }), \"Jest Config For Unit Tests\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/Shelob9/testing-react-wordpress/tree/master/e2e\"\n  }), \"Jest Config For e2e Tests\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const defaultConfig = require(\\\"./node_modules/@wordpress/scripts/config/jest-unit.config.js\\\");\\nmodule.exports = {\\n  //use the default from WordPress for everything...\\n  ...defaultConfig,\\n  //Except test ignore, where we need to ignore our e2e test directory\\n  testPathIgnorePatterns: [\\\"/.git/\\\", \\\"/node_modules/\\\", \\\"<rootDir>/e2e\\\"]\\n};\\n\")), mdx(\"p\", null, \"This is based on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/WordPress/wordpress-develop/tree/master/tests/e2e\"\n  }), \"WordPress core's e2e tests\")), mdx(\"p\", null, \"Create a directory called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"e2e\"), \". That is where e2e tests will go.\"), mdx(\"h3\", null, \"Test That The Block Works\"), mdx(\"p\", null, \"In the directory \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"e2e\"), \" try adding one test file. We are still using Jest as the test runner, so everything you learned about writing tests still applies, we just have new tools.\"), mdx(\"p\", null, \"Speaking of which, start by importing helper functions to make naviagating WordPress easier:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import {\\n  insertBlock,\\n  getEditedPostContent,\\n  createNewPost,\\n  activatePlugin,\\n  deactivatePlugin\\n} from \\\"@wordpress/e2e-test-utils\\\";\\n\")), mdx(\"p\", null, \"Now we can test that we can add the block.\"), mdx(\"p\", null, \"This test starts by activating the plugin and then afterwords we deacvitave it. This acomplishes two things. First, it resets everything between tests, which is good. Second, it makes sure that the plugin can be activated without errors.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"describe(\\\"Block\\\", () => {\\n  //file path for plugin\\n  const plugin = \\\"plugin-name/plugin-name.php\\\";\\n  beforeEach(async () => {\\n    await activatePlugin(plugin);\\n  });\\n  afterEach(async () => {\\n    await deactivatePlugin(plugin);\\n  });\\n  it(\\\"Can add block\\\", async () => {\\n    await createNewPost();\\n    await insertBlock(\\\"Josh Block\\\");\\n    expect(await getEditedPostContent()).toMatchSnapshot();\\n  });\\n});\\n\")), mdx(\"h3\", null, \"Do NOT e2e Test Everything\"), mdx(\"p\", null, \"e2e tests ensure that the system works toghether. They are a compliment to unit tests and integration tests that are faster to run and easier to setup.\"), mdx(\"p\", null, \"I think of e2e tests as coverage for what the other tests can not cover.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#save-callback","title":"Save Callback"},{"url":"#edit-callback","title":"Edit Callback"},{"url":"#e2e-testing-gutenberg-blocks","title":"e2e Testing Gutenberg Blocks","items":[{"url":"#useing-puppetter-to-automate-chrome","title":"Useing Puppetter To Automate Chrome"},{"url":"#helpful-links","title":"Helpful Links"},{"url":"#how-to-setup-up-wordpress-end-to-end-tests","title":"How To Setup Up WordPress End To End Tests"},{"url":"#configure-jest","title":"Configure Jest"},{"url":"#test-that-the-block-works","title":"Test That The Block Works"},{"url":"#do-not-e2e-test-everything","title":"Do NOT e2e Test Everything"}]}]},"parent":{"__typename":"File","relativePath":"testing-react-wordpress-blocks/5-writing-tdd-blocks.md"},"frontmatter":{"metaTitle":"Test-Driven Gutenberg Blocks","metaDescription":"desc"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/about","title":"About"}}},{"node":{"fields":{"slug":"/testing-background","title":"Types of Tests"}}},{"node":{"fields":{"slug":"/","title":"JavaScript Testing In And Around WordPress"}}},{"node":{"fields":{"slug":"/next","title":"Next Steps"}}},{"node":{"fields":{"slug":"/introduction","title":"Introduction"}}},{"node":{"fields":{"slug":"/testing-react-apps","title":"Testing React Apps"}}},{"node":{"fields":{"slug":"/testing-background/3-integration-tests","title":"Integration Tests"}}},{"node":{"fields":{"slug":"/testing-background/2-unit-tests","title":"Unit Tests"}}},{"node":{"fields":{"slug":"/testing-react-wordpress-blocks","title":"Testing WordPress Blocks"}}},{"node":{"fields":{"slug":"/testing-background/4-acceptance-tests","title":"Acceptance Tests"}}},{"node":{"fields":{"slug":"/testing-react-apps/4-integration-testing-react-apps","title":"Integration Testing React Apps"}}},{"node":{"fields":{"slug":"/testing-react-apps/5-writing-tdd-react-components","title":"Writing Test Driven React Components"}}},{"node":{"fields":{"slug":"/testing-react-apps/2-questions-and-specs","title":"Questions and Scopes"}}},{"node":{"fields":{"slug":"/testing-react-wordpress-blocks/2-setting-up","title":"Creating A WordPress Plugin Using WordPress Scripts"}}},{"node":{"fields":{"slug":"/testing-react-wordpress-blocks/5-writing-tdd-blocks","title":"Test-Driven Gutenberg Blocks"}}},{"node":{"fields":{"slug":"/testing-react-wordpress-blocks/3-structure","title":"Structuring  WordRress Plugin For Testablity"}}},{"node":{"fields":{"slug":"/testing-react-wordpress-blocks/4-writing-block-tests","title":"Wrting Tests For WordPress Blocks"}}},{"node":{"fields":{"slug":"/testing-react-apps/3-unit-testing-react","title":"Unit Testing React Apps"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"438f38a1-b020-51a3-b662-8741f27e6917"}}}